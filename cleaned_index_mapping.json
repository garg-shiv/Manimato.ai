[{"title": "create a new scene named 'myscene'.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pass"}, {"title": "add a circle with radius 2 and center at the origin to the scene.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=BLUE) \n        self.add(circle)"}, {"title": "create a text object saying 'hello, world!' and add it to the scene.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        text = Text('Hello, World!') \n        self.add(text)"}, {"title": "animate the circle to move 2 units to the right in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=BLUE) \n        self.add(circle) \n        self.play(circle.animate.shift(RIGHT * 2), run_time=2)"}, {"title": "create a square with side length 3 and add it to the scene.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=3, color=RED) \n        self.add(square)"}, {"title": "scale the square by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=3, color=RED) \n        self.add(square) \n        self.play(square.animate.scale(2), run_time=1.5)"}, {"title": "create a triangle with vertices at (-1, 0), (1, 0), and (0, 2) and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2), color=YELLOW) \n        self.add(triangle)"}, {"title": "rotate the triangle by 90 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2), color=YELLOW) \n        self.add(triangle) \n        self.play(triangle.animate.rotate(90 * DEGREES), run_time=1)"}, {"title": "create a rectangle with width 4 and height 2, centered at (0, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2, color=BLUE) \n        rectangle.move_to([0, 0, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'a' at the coordinates (-2, 1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2, color=BLUE) \n        label = Text('A').move_to([-2, 1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a square with side length 2 and a circle with radius 1 to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=RED) \n        circle = Circle(radius=1, color=GREEN) \n        vgroup = VGroup(square, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 45 degrees clockwise.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=RED) \n        circle = Circle(radius=1, color=GREEN) \n        vgroup = VGroup(square, circle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "create an axis with x-axis ranging from -5 to 5 and y-axis ranging from -3 to 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        axes = Axes(x_range=(-5, 5), y_range=(-3, 3)) \n        self.add(axes)"}, {"title": "plot a graph of the function y = sin(x) on the axis.", "content": "from manim import *\nfrom math import *\nclass GenScene(Scene):\n    def construct(self):\n        axes = Axes(x_range=(-5, 5), y_range=(-1, 1)) \n        graph = axes.plot(lambda \n        x: \n        np.sin(x), color=PURPLE) \n        self.add(axes, graph)"}, {"title": "add an arrow pointing downwards at the coordinates (-2, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        arrow = Arrow(start=(-2, 1), end=(-2, 0), color=YELLOW) \n        self.add(arrow)"}, {"title": "create an ellipse with major axis 2 and minor axis 1.5.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=2, height=1.5, color=ORANGE) \n        self.add(ellipse)"}, {"title": "rotate the ellipse clockwise by 90 degrees over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=2, height=1.5, color=ORANGE) \n        self.add(ellipse) \n        self.play(ellipse.animate.rotate(90 * DEGREES), run_time=2)"}, {"title": "create a regular pentagon with side length 2.5 and color it cyan.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2.5, color=CYAN) \n        self.add(pentagon)"}, {"title": "move the pentagon to the right by 3 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2.5, color=CYAN) \n        self.add(pentagon) \n        self.play(pentagon.animate.shift(RIGHT * 3), run_time=2)"}, {"title": "create a regular hexagon with side length 2.5 and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2.5, color=YELLOW) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 120 degrees counterclockwise over 3 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2.5, color=YELLOW) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(-120 * DEGREES), run_time=3)"}, {"title": "create a text object saying 'hello, manim!' and position it at (0, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        text = Text('Hello, Manim!') \n        text.move_to([0, 2, 0]) \n        self.add(text)"}, {"title": "add an arc with radius 3 and angle of 90 degrees centered at (-1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        arc = Arc(radius=3, start_angle=0, angle=90 * DEGREES, color=PINK) \n        arc.move_to([-1, -1, 0]) \n        self.add(arc)"}, {"title": "create a regular heptagon with side length 3 and color it green.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=3, color=GREEN) \n        self.add(heptagon)"}, {"title": "rotate the heptagon by 60 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=3, color=GREEN) \n        self.add(heptagon) \n        self.play(heptagon.animate.rotate(-60 * DEGREES), run_time=1.5)"}, {"title": "create a point at coordinates (1, 1) and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((1, 1), ).set_color(RED) \n        self.add(point)"}, {"title": "create a bezier curve with control points (-1, 0), (0, 2), and (2, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        points = [(-1, 0), (0, 2), (2, 1)] \n        curve = VMobject() \n        curve.set_points_smoothly(points) \n        self.add(curve)"}, {"title": "create a regular octagon with side length 2 and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=PURPLE) \n        self.add(octagon)"}, {"title": "scale the octagon by a factor of 1.5 in 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=PURPLE) \n        self.add(octagon) \n        self.play(octagon.animate.scale(1.5), run_time=1)"}, {"title": "create a line segment connecting points (-1, -1) and (2, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (2, 2)) \n        self.add(line)"}, {"title": "create a triangle with vertices at (-1, 0), (1, 0), and (0, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2)) \n        self.add(triangle)"}, {"title": "rotate the triangle by 90 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2)) \n        self.add(triangle) \n        self.play(triangle.animate.rotate(90 * DEGREES), run_time=1)"}, {"title": "create a rectangle with width 4 and height 2, centered at (0, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        rectangle.move_to([0, 0, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'a' at the coordinates (-2, 1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        label = Text('A').move_to([-2, 1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a square with side length 2 and a circle with radius 1 to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2) \n        circle = Circle(radius=1) \n        vgroup = VGroup(square, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 45 degrees clockwise.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2) \n        circle = Circle(radius=1) \n        vgroup = VGroup(square, circle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "add an arc with radius 3 and angle of 90 degrees centered at (-1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        arc = Arc(radius=3, start_angle=0, angle=90 * DEGREES) \n        arc.move_to([-1, -1, 0]) \n        self.add(arc)"}, {"title": "create a regular decagon with side length 2 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=PINK) \n        self.add(decagon)"}, {"title": "scale the decagon by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=PINK) \n        self.add(decagon) \n        self.play(decagon.animate.scale(2), run_time=1.5)"}, {"title": "create a line segment connecting points (-2, 1) and (2, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, 1), (2, -1)) \n        self.add(line)"}, {"title": "create a vgroup and add a triangle and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(triangle, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 30 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1, 0), (1, 0), (0, 2)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(triangle, circle) \n        self.add(vgroup) \n        self.play(vgroup.animate.rotate(30 * DEGREES), run_time=1)"}, {"title": "create a regular nonagon with side length 2 and color it teal.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=TEAL) \n        self.add(nonagon)"}, {"title": "move the nonagon to the right by 3 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=TEAL) \n        self.add(nonagon) \n        self.play(nonagon.animate.shift(RIGHT * 3), run_time=2)"}, {"title": "create an arc with radius 2, angle of 180 degrees, and centered at (1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        arc = Arc(radius=2, start_angle=0, angle=180 * DEGREES) \n        arc.move_to([1, 1, 0]) \n        self.add(arc)"}, {"title": "create a trapezoid with base lengths 2 and 4, and height 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezoid = Polygon((-2, -1.5), (2, -1.5), (1, 1.5), (-1, 1.5)) \n        self.add(trapezoid)"}, {"title": "create a point at coordinates (2, 2) and color it blue.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((2, 2), ).set_color(BLUE) \n        self.add(point)"}, {"title": "create a regular hexagon with side length 2 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=ORANGE) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 60 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=ORANGE) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(-60 * DEGREES), run_time=1)"}, {"title": "create a rectangle with width 3 and height 2, centered at (0, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=2) \n        rectangle.move_to([0, 0, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'b' at the coordinates (2, -1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=2) \n        label = Text('B').move_to([2, -1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a line segment and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, 1), (2, -1)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(line, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 45 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, 1), (2, -1)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(line, circle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular dodecagon with side length 2 and color it brown.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=BROWN) \n        self.add(dodecagon)"}, {"title": "scale the dodecagon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=BROWN) \n        self.add(dodecagon) \n        self.play(dodecagon.animate.scale(1.5), run_time=2)"}, {"title": "create a line segment connecting points (-1, 1) and (1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, 1), (1, -1)) \n        self.add(line)"}, {"title": "create a vgroup and add a rectangle and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=2) \n        circle = Circle(radius=1) \n        vgroup = VGroup(rectangle, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 60 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=2) \n        circle = Circle(radius=1) \n        vgroup = VGroup(rectangle, circle) \n        self.add(vgroup) \n        self.play(vgroup.animate.rotate(60 * DEGREES), run_time=1.5)"}, {"title": "create a regular heptagon with side length 2.5 and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=PURPLE) \n        self.add(heptagon)"}, {"title": "move the heptagon to the right by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=PURPLE) \n        self.add(heptagon) \n        self.play(heptagon.animate.shift(RIGHT * 2), run_time=1)"}, {"title": "create an arc with radius 3, angle of 180 degrees, and centered at (-1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        arc = Arc(radius=3, start_angle=0, angle=180 * DEGREES) \n        arc.move_to([-1, -1, 0]) \n        self.add(arc)"}, {"title": "create a trapezoid with base lengths 3 and 5, and height 4.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezoid = Polygon((-2.5, -2), (2.5, -2), (3, 2), (-3, 2)) \n        self.add(trapezoid)"}, {"title": "create a point at coordinates (0, 0) and color it green.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((0, 0), ).set_color(GREEN) \n        self.add(point)"}, {"title": "create a regular octagon with side length 3 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=3, color=RED) \n        self.add(octagon)"}, {"title": "rotate the octagon by 90 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=3, color=RED) \n        self.add(octagon) \n        self.play(octagon.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "create a rectangle with width 4 and height 2, centered at (-1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        rectangle.move_to([-1, 1, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'c' at the coordinates (0, -1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        label = Text('C').move_to([0, -1, 0]) \n        self.add(rectangle, label)"}, {"title": "rotate the vgroup by 30 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2) \n        circle = Circle(radius=1) \n        vgroup = VGroup(square, circle) \n        vgroup.rotate(-30 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular tetragon with side length 2 and color it gray.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        tetragon = RegularPolygon(n=4, radius=2, color=GRAY) \n        self.add(tetragon)"}, {"title": "move the tetragon to the right by 3 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        tetragon = RegularPolygon(n=4, radius=2, color=GRAY) \n        self.add(tetragon) \n        self.play(tetragon.animate.shift(RIGHT * 3), run_time=1)"}, {"title": "create a parallelogram with base lengths 4 and 2, and height 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        parallelogram = Polygon((-2, -1.5), (2, -1.5), (4, 1.5), (0, 1.5)) \n        self.add(parallelogram)"}, {"title": "create a point at coordinates (1, -1) and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((1, -1), ).set_color(YELLOW) \n        self.add(point)"}, {"title": "rotate the pentagon by 120 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2.5, color=CYAN) \n        self.add(pentagon) \n        self.play(pentagon.animate.rotate(-120 * DEGREES), run_time=1.5)"}, {"title": "create a rectangle with width 5 and height 3, centered at (1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=5, height=3) \n        rectangle.move_to([1, -1, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'd' at the coordinates (2, 1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=5, height=3) \n        label = Text('D').move_to([2, 1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a triangle and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Triangle() \n        circle = Circle(radius=1) \n        vgroup = VGroup(triangle, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 45 degrees clockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Triangle() \n        circle = Circle(radius=1) \n        vgroup = VGroup(triangle, circle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular nonagon with side length 3.5 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3.5, color=PINK) \n        self.add(nonagon)"}, {"title": "move the nonagon to the right by 4 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3.5, color=PINK) \n        self.add(nonagon) \n        self.play(nonagon.animate.shift(RIGHT * 4), run_time=1.5)"}, {"title": "create a sector with radius 2, angle of 120 degrees, and centered at (1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        sector = Sector(radius=2, start_angle=0, angle=120 * DEGREES) \n        sector.move_to([1, 1, 0]) \n        self.add(sector)"}, {"title": "create a trapezium with base lengths 2 and 4, and height 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezium = Polygon((-2, -1.5), (2, -1.5), (4, 1.5), (-4, 1.5)) \n        self.add(trapezium)"}, {"title": "create a point at coordinates (-1, 2) and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((-1, 2), ).set_color(ORANGE) \n        self.add(point)"}, {"title": "create a regular hexagon with side length 2 and color it teal.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=TEAL) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 60 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=TEAL) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(-60 * DEGREES), run_time=2)"}, {"title": "create a rectangle with width 3 and height 5, centered at (-2, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=5) \n        rectangle.move_to([-2, 2, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'e' at the coordinates (-1, -1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=5) \n        label = Text('E').move_to([-1, -1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a line segment and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(line, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 90 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(line, circle) \n        vgroup.rotate(-90 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular heptagon with side length 2.5 and color it lavender.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=LAVENDER) \n        self.add(heptagon)"}, {"title": "move the heptagon to the right by 3.5 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=LAVENDER) \n        self.add(heptagon) \n        self.play(heptagon.animate.shift(RIGHT * 3.5), run_time=2)"}, {"title": "create a sector with radius 2.5, angle of 60 degrees, and centered at (-1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        sector = Sector(radius=2.5, start_angle=0, angle=60 * DEGREES) \n        sector.move_to([-1, 1, 0]) \n        self.add(sector)"}, {"title": "create a trapezoid with base lengths 2 and 5, and height 4.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezoid = Polygon((-2.5, -2), (2.5, -2), (3.5, 2), (-3.5, 2)) \n        self.add(trapezoid)"}, {"title": "create a point at coordinates (2, -2) and color it magenta.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((2, -2), ).set_color(MAGENTA) \n        self.add(point)"}, {"title": "create a regular octagon with side length 3 and color it brown.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=3, color=BROWN) \n        self.add(octagon)"}, {"title": "rotate the octagon by 90 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=3, color=BROWN) \n        self.add(octagon) \n        self.play(octagon.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "add a text label 'f' at the coordinates (0, -1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        label = Text('F').move_to([0, -1, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a square and a circle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square() \n        circle = Circle(radius=1) \n        vgroup = VGroup(square, circle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 30 degrees clockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square() \n        circle = Circle(radius=1) \n        vgroup = VGroup(square, circle) \n        vgroup.rotate(-30 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular nonagon with side length 2 and color it olive.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=OLIVE) \n        self.add(nonagon)"}, {"title": "move the nonagon to the right by 2.5 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=OLIVE) \n        self.add(nonagon) \n        self.play(nonagon.animate.shift(RIGHT * 2.5), run_time=1.5)"}, {"title": "create a sector with radius 3, angle of 90 degrees, and centered at (0, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        sector = Sector(radius=3, start_angle=0, angle=90 * DEGREES) \n        sector.move_to([0, 0, 0]) \n        self.add(sector)"}, {"title": "create a trapezium with base lengths 2 and 6, and height 4.5.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezium = Polygon((-3, -2.25), (3, -2.25), (4, 2.25), (-4, 2.25)) \n        self.add(trapezium)"}, {"title": "create a point at coordinates (-2, -2) and color it gray.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((-2, -2), ).set_color(GRAY) \n        self.add(point)"}, {"title": "create a regular hexagon with side length 3 and color it maroon.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=3, color=MAROON) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 45 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=3, color=MAROON) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(-45 * DEGREES), run_time=2)"}, {"title": "create a rectangle with width 5 and height 2, centered at (1, -2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=5, height=2) \n        rectangle.move_to([1, -2, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'g' at the coordinates (2, 0) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=5, height=2) \n        label = Text('G').move_to([2, 0, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a line segment and a square to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        square = Square(side_length=2) \n        vgroup = VGroup(line, square) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 60 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        square = Square(side_length=2) \n        vgroup = VGroup(line, square) \n        vgroup.rotate(-60 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular heptagon with side length 2.5 and color it navy.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=NAVY) \n        self.add(heptagon)"}, {"title": "move the heptagon to the right by 3 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2.5, color=NAVY) \n        self.add(heptagon) \n        self.play(heptagon.animate.shift(RIGHT * 3), run_time=1)"}, {"title": "create a sector with radius 2.5, angle of 120 degrees, and centered at (-1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        sector = Sector(radius=2.5, start_angle=0, angle=120 * DEGREES) \n        sector.move_to([-1, -1, 0]) \n        self.add(sector)"}, {"title": "create a trapezoid with base lengths 3 and 7, and height 5.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezoid = Polygon((-4, -2.5), (4, -2.5), (5, 2.5), (-5, 2.5)) \n        self.add(trapezoid)"}, {"title": "create a point at coordinates (3, -3) and color it indigo.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((3, -3), ).set_color(INDIGO) \n        self.add(point)"}, {"title": "create a regular octagon with side length 4 and color it aqua.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=4, color=AQUA) \n        self.add(octagon)"}, {"title": "rotate the octagon by 120 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=4, color=AQUA) \n        self.add(octagon) \n        self.play(octagon.animate.rotate(-120 * DEGREES), run_time=2)"}, {"title": "create a rectangle with width 6 and height 3, centered at (2, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=6, height=3) \n        rectangle.move_to([2, 2, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'h' at the coordinates (3, 3) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=6, height=3) \n        label = Text('H').move_to([3, 3, 0]) \n        self.add(rectangle, label)"}, {"title": "rotate the vgroup by 45 degrees clockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        circle = Circle(radius=1) \n        vgroup = VGroup(line, circle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular nonagon with side length 3 and color it olive.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3, color=OLIVE) \n        self.add(nonagon)"}, {"title": "move the nonagon to the right by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3, color=OLIVE) \n        self.add(nonagon) \n        self.play(nonagon.animate.shift(RIGHT * 4), run_time=2)"}, {"title": "create a sector with radius 3, angle of 90 degrees, and centered at (1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        sector = Sector(radius=3, start_angle=0, angle=90 * DEGREES) \n        sector.move_to([1, 1, 0]) \n        self.add(sector)"}, {"title": "create a trapezoid with base lengths 2 and 6, and height 4.5.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        trapezoid = Polygon((-3, -2.25), (3, -2.25), (4, 2.25), (-4, 2.25)) \n        self.add(trapezoid)"}, {"title": "add a text label 'i' at the coordinates (2, 0) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=5, height=2) \n        label = Text('I').move_to([2, 0, 0]) \n        self.add(rectangle, label)"}, {"title": "create a circle with radius 2 and center at the origin.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2) \n        self.add(circle)"}, {"title": "move the circle to the right by 3 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2) \n        self.add(circle) \n        self.play(circle.animate.shift(RIGHT * 3), run_time=1)"}, {"title": "create a square with side length 4 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=4, color=RED) \n        self.add(square)"}, {"title": "scale the square by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=4, color=RED) \n        self.add(square) \n        self.play(square.animate.scale(2), run_time=1.5)"}, {"title": "create a triangle with side lengths 3, 4, and 5.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1.5, -2), (1.5, -2), (0, 2), color=YELLOW) \n        self.add(triangle)"}, {"title": "rotate the triangle by 90 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = Polygon((-1.5, -2), (1.5, -2), (0, 2), color=YELLOW) \n        self.add(triangle) \n        self.play(triangle.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "create a line segment from (-2, -1) to (2, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, -1), (2, 1), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment upward by 2 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, -1), (2, 1), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(UP * 2), run_time=1.5)"}, {"title": "create a regular pentagon with side length 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=3, color=BLUE) \n        self.add(pentagon)"}, {"title": "move the pentagon to the left by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=3, color=BLUE) \n        self.add(pentagon) \n        self.play(pentagon.animate.shift(LEFT * 4), run_time=2)"}, {"title": "create an ellipse with major axis 4 and minor axis 2.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=4, height=2, color=ORANGE) \n        self.add(ellipse)"}, {"title": "scale the ellipse by a factor of 1.5 in 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=4, height=2, color=ORANGE) \n        self.add(ellipse) \n        self.play(ellipse.animate.scale(1.5), run_time=1)"}, {"title": "create a point at coordinates (1, 1) and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((1, 1), ).set_color(PURPLE) \n        self.add(point)"}, {"title": "create a regular heptagon with side length 2 and color it cyan.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2, color=CYAN) \n        self.add(heptagon)"}, {"title": "rotate the heptagon by 60 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2, color=CYAN) \n        self.add(heptagon) \n        self.play(heptagon.animate.rotate(-60 * DEGREES), run_time=1.5)"}, {"title": "create a rectangle with width 3 and height 6, centered at (-1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=6) \n        rectangle.move_to([-1, 1, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'm' at the coordinates (0, 2) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=6) \n        label = Text('M').move_to([0, 2, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a line segment and a square to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        square = Square() \n        vgroup = VGroup(line, square) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 45 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1)) \n        square = Square() \n        vgroup = VGroup(line, square) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular octagon with side length 2 and color it teal.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=TEAL) \n        self.add(octagon)"}, {"title": "move the octagon upward by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=TEAL) \n        self.add(octagon) \n        self.play(octagon.animate.shift(UP * 3), run_time=1.5)"}, {"title": "create a regular nonagon with side length 3 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3, color=PINK) \n        self.add(nonagon)"}, {"title": "rotate the nonagon by 90 degrees clockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=3, color=PINK) \n        self.add(nonagon) \n        self.play(nonagon.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "create a line from (0, 0) to (3, 4).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (3, 4), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line downward by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (3, 4), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(DOWN * 2), run_time=1)"}, {"title": "create an equilateral triangle with side length 3 and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=3, color=YELLOW) \n        self.add(triangle)"}, {"title": "scale the triangle by a factor of 1.5 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=3, color=YELLOW) \n        self.add(triangle) \n        self.play(triangle.animate.scale(1.5), run_time=1.5)"}, {"title": "create a point at coordinates (-1, -1) and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((-1, -1), ).set_color(ORANGE) \n        self.add(point)"}, {"title": "create a regular decagon with side length 2 and color it green.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=GREEN) \n        self.add(decagon)"}, {"title": "rotate the decagon by 45 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=GREEN) \n        self.add(decagon) \n        self.play(decagon.animate.rotate(-45 * DEGREES), run_time=1)"}, {"title": "create a rectangle with width 2 and height 4, centered at (2, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=2, height=4) \n        rectangle.move_to([2, -1, 0]) \n        self.add(rectangle)"}, {"title": "add a text label 'n' at the coordinates (2, 3) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=2, height=4) \n        label = Text('N').move_to([2, 3, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a circle and a triangle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle() \n        triangle = Polygon((-1, -1), (1, -1), (0, 1)) \n        vgroup = VGroup(circle, triangle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 90 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle() \n        triangle = Polygon((-1, -1), (1, -1), (0, 1)) \n        vgroup = VGroup(circle, triangle) \n        vgroup.rotate(-90 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular hexagon with side length 2 and color it violet.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=VIOLET) \n        self.add(hexagon)"}, {"title": "move the hexagon to the right by 3 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=VIOLET) \n        self.add(hexagon) \n        self.play(hexagon.animate.shift(RIGHT * 3), run_time=2)"}, {"title": "create a regular enneagon with side length 3 and color it brown.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        enneagon = RegularPolygon(n=9, radius=3, color=BROWN) \n        self.add(enneagon)"}, {"title": "rotate the enneagon by 60 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        enneagon = RegularPolygon(n=9, radius=3, color=BROWN) \n        self.add(enneagon) \n        self.play(enneagon.animate.rotate(-60 * DEGREES), run_time=1.5)"}, {"title": "create a line segment from (-3, -2) to (3, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, -2), (3, 2), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment upward by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, -2), (3, 2), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(UP * 4), run_time=2)"}, {"title": "create an equilateral triangle with side length 2 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=2, color=PINK) \n        self.add(triangle)"}, {"title": "scale the triangle by a factor of 2 in 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=2, color=PINK) \n        self.add(triangle) \n        self.play(triangle.animate.scale(2), run_time=1)"}, {"title": "create a point at coordinates (2, 2) and color it teal.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        point = Dot((2, 2), ).set_color(TEAL) \n        self.add(point)"}, {"title": "create a regular dodecagon with side length 2 and color it gray.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=GRAY) \n        self.add(dodecagon)"}, {"title": "rotate the dodecagon by 30 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=GRAY) \n        self.add(dodecagon) \n        self.play(dodecagon.animate.rotate(-30 * DEGREES), run_time=1.5)"}, {"title": "add a text label 'o' at the coordinates (-1, -2) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=5) \n        label = Text('O').move_to([-1, -2, 0]) \n        self.add(rectangle, label)"}, {"title": "create a vgroup and add a circle, a square, and a triangle to it.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle() \n        square = Square() \n        triangle = Polygon((-1, -1), (1, -1), (0, 1)) \n        vgroup = VGroup(circle, square, triangle) \n        self.add(vgroup)"}, {"title": "rotate the vgroup by 120 degrees clockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle() \n        square = Square() \n        triangle = Polygon((-1, -1), (1, -1), (0, 1)) \n        vgroup = VGroup(circle, square, triangle) \n        vgroup.rotate(-120 * DEGREES) \n        self.add(vgroup)"}, {"title": "create a regular pentadecagon with side length 2 and color it cyan.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentadecagon = RegularPolygon(n=15, radius=2, color=CYAN) \n        self.add(pentadecagon)"}, {"title": "move the pentadecagon to the left by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentadecagon = RegularPolygon(n=15, radius=2, color=CYAN) \n        self.add(pentadecagon) \n        self.play(pentadecagon.animate.shift(LEFT * 4), run_time=2)"}, {"title": "create a regular polygon with 20 sides, side length 2, and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=20, radius=2, color=ORANGE) \n        self.add(polygon)"}, {"title": "rotate the polygon by 75 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=20, radius=2, color=ORANGE) \n        self.add(polygon) \n        self.play(polygon.animate.rotate(-75 * DEGREES), run_time=1.5)"}, {"title": "create a line segment from (-2, -2) to (2, 2).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, -2), (2, 2), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment to the right by 3 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, -2), (2, 2), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(RIGHT * 3), run_time=1)"}, {"title": "create an equilateral triangle with side length 2 and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=2, color=YELLOW) \n        self.add(triangle)"}, {"title": "scale the triangle by a factor of 2 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=2, color=YELLOW) \n        self.add(triangle) \n        self.play(triangle.animate.scale(2), run_time=2)"}, {"title": "create a square with side length 2 and color it blue.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=BLUE) \n        self.add(square)"}, {"title": "move the square to the right by 3 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=BLUE) \n        self.add(square) \n        self.play(square.animate.shift(RIGHT * 3), run_time=2)"}, {"title": "create a circle with radius 1.5 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=1.5, color=RED) \n        self.add(circle)"}, {"title": "scale the circle by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=1.5, color=RED) \n        self.add(circle) \n        self.play(circle.animate.scale(2), run_time=1.5)"}, {"title": "create a text object saying 'hello, manim!' and add it to the scene.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        text = Text('Hello, Manim!') \n        self.add(text)"}, {"title": "fade in the text object over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        text = Text('Hello, Manim!') \n        self.add(text) \n        self.play(FadeIn(text), run_time=1)"}, {"title": "rotate the line segment by 45 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, -2), (2, 2), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.rotate(-45 * DEGREES), run_time=1)"}, {"title": "create a rectangle with width 3 and height 4 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=4, color=ORANGE) \n        self.add(rectangle)"}, {"title": "move the rectangle downward by 2 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=4, color=ORANGE) \n        self.add(rectangle) \n        self.play(rectangle.animate.shift(DOWN * 2), run_time=1.5)"}, {"title": "create a polygon with vertices at (-2, 0), (0, 2), and (2, 0) and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = Polygon((-2, 0), (0, 2), (2, 0), color=YELLOW) \n        self.add(polygon)"}, {"title": "scale the polygon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = Polygon((-2, 0), (0, 2), (2, 0), color=YELLOW) \n        self.add(polygon) \n        self.play(polygon.animate.scale(1.5), run_time=2)"}, {"title": "create a regular hexagon with side length 2 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=PINK) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 60 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=PINK) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(60 * DEGREES), run_time=1.5)"}, {"title": "create an ellipse with x-radius 3 and y-radius 2 and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=6, height=4, color=PURPLE) \n        self.add(ellipse)"}, {"title": "fade out the ellipse over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=6, height=4, color=PURPLE) \n        self.add(ellipse) \n        self.play(FadeOut(ellipse), run_time=1)"}, {"title": "move the heptagon to the left by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2, color=CYAN) \n        self.add(heptagon) \n        self.play(heptagon.animate.shift(LEFT * 3), run_time=1.5)"}, {"title": "create a regular pentagon with side length 2 and color it brown.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=BROWN) \n        self.add(pentagon)"}, {"title": "move the pentagon upward by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=BROWN) \n        self.add(pentagon) \n        self.play(pentagon.animate.shift(UP * 2), run_time=1)"}, {"title": "create a regular octagon with side length 2 and color it olive.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=OLIVE) \n        self.add(octagon)"}, {"title": "scale the octagon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=OLIVE) \n        self.add(octagon) \n        self.play(octagon.animate.scale(1.5), run_time=2)"}, {"title": "create a regular tetradecagon with side length 2 and color it lime.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        tetradecagon = RegularPolygon(n=14, radius=2, color=LIME) \n        self.add(tetradecagon)"}, {"title": "move the tetradecagon to the right by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        tetradecagon = RegularPolygon(n=14, radius=2, color=LIME) \n        self.add(tetradecagon) \n        self.play(tetradecagon.animate.shift(RIGHT * 4), run_time=2)"}, {"title": "create a regular polygon with 6 sides, side length 2, and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=6, radius=2, color=PURPLE) \n        self.add(polygon)"}, {"title": "rotate the polygon by 90 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=6, radius=2, color=PURPLE) \n        self.add(polygon) \n        self.play(polygon.animate.rotate(90 * DEGREES), run_time=1.5)"}, {"title": "create a line segment from (0, 0) to (4, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (4, 0), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment upward by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (4, 0), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(UP * 2), run_time=1)"}, {"title": "create a regular polygon with 8 sides, side length 2, and color it teal.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=8, radius=2, color=TEAL) \n        self.add(polygon)"}, {"title": "scale the polygon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=8, radius=2, color=TEAL) \n        self.add(polygon) \n        self.play(polygon.animate.scale(1.5), run_time=2)"}, {"title": "create a line segment from (1, 1) to (-1, -1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((1, 1), (-1, -1), ).set_color(GREEN) \n        self.add(line)"}, {"title": "rotate the line segment by 45 degrees counterclockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((1, 1), (-1, -1), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.rotate(-45 * DEGREES), run_time=1.5)"}, {"title": "create a regular polygon with 10 sides, side length 2, and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=10, radius=2, color=YELLOW) \n        self.add(polygon)"}, {"title": "move the polygon to the left by 3 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=10, radius=2, color=YELLOW) \n        self.add(polygon) \n        self.play(polygon.animate.shift(LEFT * 3), run_time=1)"}, {"title": "create a line segment from (-3, 0) to (3, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, 0), (3, 0), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment downward by 2 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, 0), (3, 0), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(DOWN * 2), run_time=1.5)"}, {"title": "create a regular polygon with 12 sides, side length 2, and color it blue.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=12, radius=2, color=BLUE) \n        self.add(polygon)"}, {"title": "scale the polygon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=12, radius=2, color=BLUE) \n        self.add(polygon) \n        self.play(polygon.animate.scale(1.5), run_time=2)"}, {"title": "create a regular polygon with 6 sides, side length 2, and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=6, radius=2, color=RED) \n        self.add(polygon)"}, {"title": "move the polygon to the right by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=6, radius=2, color=RED) \n        self.add(polygon) \n        self.play(polygon.animate.shift(RIGHT * 3), run_time=1.5)"}, {"title": "create a regular polygon with 8 sides, side length 2, and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=8, radius=2, color=PINK) \n        self.add(polygon)"}, {"title": "scale the polygon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        polygon = RegularPolygon(n=8, radius=2, color=PINK) \n        self.add(polygon) \n        self.play(polygon.animate.scale(1.5), run_time=2)"}, {"title": "create a square with side length 2 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=RED) \n        self.add(square)"}, {"title": "move the square upward by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=2, color=RED) \n        self.add(square) \n        self.play(square.animate.shift(UP * 2), run_time=1)"}, {"title": "create a rectangle with width 3 and height 4.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=4, color=BLUE) \n        self.add(rectangle)"}, {"title": "rotate the rectangle by 90 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=3, height=4, color=BLUE) \n        self.add(rectangle) \n        self.play(rectangle.animate.rotate(90 * DEGREES), run_time=1.5)"}, {"title": "create an ellipse with x-radius 2 and y-radius 3.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=4, height=6, color=GREEN) \n        self.add(ellipse)"}, {"title": "scale the ellipse by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        ellipse = Ellipse(width=4, height=6, color=GREEN) \n        self.add(ellipse) \n        self.play(ellipse.animate.scale(1.5), run_time=2)"}, {"title": "create a circle with radius 2 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=ORANGE) \n        self.add(circle)"}, {"title": "move the circle to the left by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=ORANGE) \n        self.add(circle) \n        self.play(circle.animate.shift(LEFT * 3), run_time=1.5)"}, {"title": "create a regular hexagon with side length 2 and color it yellow.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=YELLOW) \n        self.add(hexagon)"}, {"title": "rotate the hexagon by 120 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=YELLOW) \n        self.add(hexagon) \n        self.play(hexagon.animate.rotate(-120 * DEGREES), run_time=1)"}, {"title": "create a regular pentagon with side length 2 and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=PURPLE) \n        self.add(pentagon)"}, {"title": "scale the pentagon by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=PURPLE) \n        self.add(pentagon) \n        self.play(pentagon.animate.scale(2), run_time=1.5)"}, {"title": "rotate the octagon by 90 degrees clockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        octagon = RegularPolygon(n=8, radius=2, color=TEAL) \n        self.add(octagon) \n        self.play(octagon.animate.rotate(90 * DEGREES), run_time=1)"}, {"title": "create a regular heptagon with side length 2 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2, color=PINK) \n        self.add(heptagon)"}, {"title": "scale the heptagon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=2, color=PINK) \n        self.add(heptagon) \n        self.play(heptagon.animate.scale(1.5), run_time=2)"}, {"title": "create a regular hexagon with side length 2 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=RED) \n        self.add(hexagon)"}, {"title": "move the hexagon to the right by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=RED) \n        self.add(hexagon) \n        self.play(hexagon.animate.shift(RIGHT * 3), run_time=1.5)"}, {"title": "create a regular nonagon with side length 2 and color it blue.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=BLUE) \n        self.add(nonagon)"}, {"title": "scale the nonagon by a factor of 2 in 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        nonagon = RegularPolygon(n=9, radius=2, color=BLUE) \n        self.add(nonagon) \n        self.play(nonagon.animate.scale(2), run_time=1.5)"}, {"title": "create a line segment from (-1, -1) to (1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1), ).set_color(GREEN) \n        self.add(line)"}, {"title": "rotate the line segment by 90 degrees clockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-1, -1), (1, 1), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.rotate(90 * DEGREES), run_time=1)"}, {"title": "create a regular decagon with side length 2 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=ORANGE) \n        self.add(decagon)"}, {"title": "move the decagon downward by 3 units over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        decagon = RegularPolygon(n=10, radius=2, color=ORANGE) \n        self.add(decagon) \n        self.play(decagon.animate.shift(DOWN * 3), run_time=1.5)"}, {"title": "create a line segment from (0, 0) to (3, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (3, 0), ).set_color(GREEN) \n        self.add(line)"}, {"title": "rotate the line segment by 60 degrees counterclockwise over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((0, 0), (3, 0), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.rotate(-60 * DEGREES), run_time=1)"}, {"title": "create a regular dodecagon with side length 2 and color it pink.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=PINK) \n        self.add(dodecagon)"}, {"title": "scale the dodecagon by a factor of 1.5 in 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        dodecagon = RegularPolygon(n=12, radius=2, color=PINK) \n        self.add(dodecagon) \n        self.play(dodecagon.animate.scale(1.5), run_time=2)"}, {"title": "create a line segment from (-2, 0) to (2, 0).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, 0), (2, 0), ).set_color(GREEN) \n        self.add(line)"}, {"title": "move the line segment upward by 1 unit over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-2, 0), (2, 0), ).set_color(GREEN) \n        self.add(line) \n        self.play(line.animate.shift(UP * 1), run_time=1)"}, {"title": "rotate the pentagon by 90 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=PURPLE) \n        self.add(pentagon) \n        self.play(pentagon.animate.rotate(90 * DEGREES), run_time=1.5)"}, {"title": "create a circle with radius 2 and color it red.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=RED) \n        self.add(circle)"}, {"title": "move the circle to the right by 3 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle(radius=2, color=RED) \n        self.add(circle) \n        self.play(circle.animate.shift(RIGHT * 3), run_time=2)"}, {"title": "create a square with side length 4 and color it blue.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=4, color=BLUE) \n        self.add(square)"}, {"title": "scale the square by a factor of 0.5 in 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=4, color=BLUE) \n        self.add(square) \n        self.play(square.animate.scale(0.5), run_time=1)"}, {"title": "create a regular pentagon with side length 3 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=3, color=ORANGE) \n        self.add(pentagon)"}, {"title": "rotate the pentagon by 90 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=3, color=ORANGE) \n        self.add(pentagon) \n        self.play(pentagon.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "create a rectangle with width 4 and height 2, centered at (1, 1).", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        rectangle.move_to([1, 1, 0]) \n        self.add(rectangle)"}, {"title": "rotate the vgroup by 45 degrees clockwise over 1.5 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        circle = Circle() \n        triangle = Polygon((-1, -1), (1, -1), (0, 1)) \n        vgroup = VGroup(circle, triangle) \n        vgroup.rotate(-45 * DEGREES) \n        self.add(vgroup)"}, {"title": "move the hexagon to the left by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        hexagon = RegularPolygon(n=6, radius=2, color=YELLOW) \n        self.add(hexagon) \n        self.play(hexagon.animate.shift(LEFT * 2), run_time=1)"}, {"title": "rotate the heptagon by 60 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        heptagon = RegularPolygon(n=7, radius=3, color=GREEN) \n        self.add(heptagon) \n        self.play(heptagon.animate.rotate(-60 * DEGREES), run_time=2)"}, {"title": "create a line segment from (-3, 0) to (3, 0) and color it purple.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, 0), (3, 0), ).set_color(PURPLE) \n        self.add(line)"}, {"title": "move the line segment upwards by 2 units over 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        line = Line((-3, 0), (3, 0), ).set_color(PURPLE) \n        self.add(line) \n        self.play(line.animate.shift(UP * 2), run_time=1)"}, {"title": "rotate the pentagon by 90 degrees counterclockwise over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=ORANGE) \n        self.add(pentagon) \n        self.play(pentagon.animate.rotate(-90 * DEGREES), run_time=2)"}, {"title": "move the square to the right by 4 units over 2 seconds.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=5, color=CYAN) \n        self.add(square) \n        self.play(square.animate.shift(RIGHT * 4), run_time=2)"}, {"title": "add a text label 'a' at the coordinates (2, -1) of the rectangle.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        rectangle = Rectangle(width=4, height=2) \n        label = Text('A').move_to([2, -1, 0]) \n        self.add(rectangle, label)"}, {"title": "scale the triangle by a factor of 0.5 in 1 second.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        triangle = RegularPolygon(n=3, radius=3, color=PINK) \n        self.add(triangle) \n        self.play(triangle.animate.scale(0.5), run_time=1)"}, {"title": "create a square with side length 5 and color it cyan.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        square = Square(side_length=5, color=CYAN) \n        self.add(square)"}, {"title": "create a regular pentagon with side length 2 and color it orange.", "content": "from manim import *\nclass GenScene(Scene):\n    def construct(self):\n        pentagon = RegularPolygon(n=5, radius=2, color=ORANGE) \n        self.add(pentagon)"}]